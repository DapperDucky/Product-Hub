if not init then
    init = true
    Gallery = {}
    Tabs = {}
    CurrentGalleryImageIndex = 1
    LastPlayerInteraction = nil
    LastAutoScroll = 8
    SelectedTab = 1
    
    --##########################
    -- EDIT HERE
    ProductName = "Taco Ship" -- Name of the product
    BpPrice = "129999999999" -- Price for a Blueprint
    TokenPrice = "72762562726" -- Price for a token
    
    -- Colors
    --- Font Colors
    HeaderFontColor = {r = 1.0, g = 1.0, b = 0.1, o = 1.0}
    SubHeaderFontColor = {r = 1.0, g = 1.0, b = 0.1, o = 1.0}
    FontColor = {r = 0.8, g = 0.8, b = 0.8, o = 1.0}
    
    --- Background colors
    HeaderColor = {r = 0.055, g = 0.055, b = 0.055, o = 1.0}
    InfoColumnHeader = {r = 0.095, g = 0.095, b = 0.095, o = 1.0}
    BackgroundColor = {r = 0.125, g = 0.125, b = 0.125, o = 1.0}
    
    --- Tab Colors
    DefaultTabHighlightColor = {r = 0.5, g = 0.5, b = 0.5, o = 1.0}
    SelectedTabHighlightColor = {r = 1.0, g = 1.0, b = 0.1, o = 1.0}
    
    -- Buttons
    DefaultButtonColor = {r = 0.055, g = 0.055, b = 0.055, o = 1.0}
    DefaultButtonFontColor = {r = 1.0, g = 1.0, b = 1.0, o = 1.0}
    PressedButtonColor = {r = 0.125, g = 0.125, b = 0.125, o = 1.0}
    PressedButtonFontColor = {r = 1.0, g = 1.0, b = 0.1, o = 1.0}
    
    -- The images of the product that you want to display
    -- To add an image, simply copy one of the lines below and fill in the fields as desired
    -- Img: The image you wish to display
    -- OptionalHeading: An optional heading that will be displayed with your image
    -- OptionalDescription: An optional description to be showed with your image that allows you to add context or more info to the image
    -- (The rows below are for example purposes and may be edited, removed, or added to)
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/111573/8904d605-62e7-4940-a7f2-9f1840f47284.jpg', OptionalHeading = 'An Optional Heading', OptionalDescription = 'This is an optional description area. It only shows when there is text provided in the optional text field for the currently selected image. Use it to help give context to your images'}
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/111573/f10d48fb-5568-40c6-aa1d-1df6318c0d08.jpg', OptionalHeading = 'An Optional Heading', OptionalDescription = ''}
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/50141/64b22960-0e0a-432c-b3e5-ac8ef63c346d.jpg', OptionalHeading = 'An Optional Heading', OptionalDescription = ''}
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/50141/119158c7-66d8-445f-a8eb-44831d188f31.jpg', OptionalHeading = '', OptionalDescription = 'This is an optional description area. It only shows when there is text provided in the optional text field for the currently selected image. Use it to help give context to your images'}
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/75251/192518e4-367b-4116-9e0f-26300d1b4f8f.jpg', OptionalHeading = '', OptionalDescription = ''}
    Gallery[#Gallery+1] = {Img = 'assets.prod.novaquark.com/75251/192518e4-367b-4116-9e0f-26300d1b4f8f.jpg', OptionalHeading = 'TACO', OptionalDescription = 'I like Tacos'}
    
    Tabs[#Tabs+1] = {Name = 'Tab 1', Info = {{LongDescription = 'This is a really long description you can use to give your customers a description or some other wall of text. You can fit a lot in here as you can see. The quick brown fix jumps over the lazy dog. Even moar text. Is this long enough?'}}}
    Tabs[#Tabs+1] = {Name = 'Tab 2', Info = {{Key = 'Key 1', Value = 'Value 1'},{Key = 'Key 2', Value = 'Value 2'},{Key = 'Key 3', Value = 'Value 3'}}}
    Tabs[#Tabs+1] = {Name = 'Tab 3', Info = {{Key = 'Key 1', Value = 'Value 1'},{Key = 'Key 2', Value = 'Value 2'},{Key = 'Key 3', Value = 'Value 3'}}}
    Tabs[#Tabs+1] = {Name = 'Tab 4', Info = {{Key = 'Key 1', Value = 'Value 1'},{Key = 'Key 2', Value = 'Value 2'},{Key = 'Key 3', Value = 'Value 3'},{Key = 'Key 4', Value = 'Value 4'}}}
    Tabs[#Tabs+1] = {Name = 'Taco', Info = {{Key = 'Shell', Value = '1'},{Key = 'Beef', Value = '2'},{Key = 'Cheese', Value = 'PepperJack'},{Key = 'Sauce', Value = 'Hot'},{Key = 'Gauc', Value = 'Extra'}}}
    -- END EDIT AREA
    --##########################
    
    -- Objects
    Mouse = {}
    function GetMouse()
        local mx, my = getCursor()
        Mouse = {x = mx, y = my, Down = getCursorDown(), Release = getCursorReleased(), DownCount = Ternary(Mouse.DownCount ~= nil, Mouse.DownCount, 0)}
    end
    
    Screen = nil
    function GetScreen()
        local s = {}
        local x, y = getResolution()
        s.Width = x
        s.Height = y
        s.HalfWidth = math.floor(x/2)
        s.HalfHeight = math.floor(y/2)
        s.ThirdWidth = math.floor(x/3)
        s.ThirdHeight = math.floor(y/3)
        s.HeaderWidth = x
        s.HeaderHeight = 78
        s.InfoWidth = math.floor(math.floor(x*0.36)*0.62)
        s.InfoHeight = y
        s.HalfInfoWidth = math.floor(math.floor(math.floor(x*0.38)*0.62)/2)
        s.HalfInfoHeight = math.floor(y/2)
        s.ContentWidth = s.Width - s.InfoWidth
        s.ContentHeight = s.Height - s.HeaderHeight
        s.HalfContentWidth = math.floor((x - math.floor(math.floor(x*0.38)*0.62))/2)
        s.HalfContentHeight = math.floor(y/2)
        Screen = s
    end

     -- Functions
    function Ternary(condition,x,y) if condition then return x else return y end end
    function ToColor(w,x,y,z) return {r = w, g = x, b = y, o = z} end
    function GetPerc(x,y) return math.floor((x/y)*100) end
    function GetPercNum(x,y) return math.floor((x*y)/100) end
    function NextImg() CurrentGalleryImageIndex = Ternary(CurrentGalleryImageIndex + 1 > #Gallery, 1, CurrentGalleryImageIndex + 1) end
    function PrevImg() CurrentGalleryImageIndex = Ternary(CurrentGalleryImageIndex - 1 < 1, #Gallery, CurrentGalleryImageIndex - 1) end
    
    function Split(s, delimiter)
        result = {};
        for match in (s..delimiter):gmatch("(.-)"..delimiter) do
            table.insert(result, match);
        end
        return result;
    end
    
    function DisplayText(layer, fnt, text, x, y, alignH, alignV, color)
        setNextFillColor(layer, color.r, color.g, color.b, color.o)
        setNextTextAlign(layer, alignH, alignV)
        addText(layer, fnt, text, x, y)
    end
    
    function DisplayTextArea(layer, text, x, y, width, maxlength, font, alignH, alignV, color)
        local length = text:len()
        color = Ternary(color ~= nil, color, ToColor(.8, .8, .8, 1))
        
        if alignH == nil then alignH = AlignH_Left end
        if alignV == nil then alignV = AlignV_Middle end
        
        local txt = Split(text, " ")
        local i = 1
        local c = 0
        
        while #txt >= i do
            local line = ''
            while i <= #txt and line:len() + 1 + txt[i]:len() <= maxlength do
                line = line ..Ternary(i == 1, '', ' ').. txt[i]
                i = i + 1
            end
            DisplayText(layer, font, line, x, y + (20*c), alignH, alignV, color)
            c = c + 1
        end
    end
    
    function DisplayBox(layer, x, y, w, h, fill, shadow, blur, round, stroke, strokeWidth)
        if stroke ~= nil then setNextStrokeColor(layer, stroke.r, stroke.g, stroke.b, stroke.o) end
        if strokeWidth ~= nil then setNextStrokeWidth(layer, strokeWidth) end
        if shadow ~= nil then setNextShadow(layer, blur, shadow.r, shadow.g, shadow.b, shadow.o) end
        if fill ~= nil then setNextFillColor(layer, fill.r, fill.g, fill.b, fill.o) end
        if round ~= nil then addBoxRounded(layer, x, y, w, h, round) else addBox(layer, x, y, w, h) end
    end
    
    function CreateButton(layer, x, y, width, height, text, value, fontColor, fontColor_Down, backColor, backColor_Down, font, shadow)
        local down = false
        local click = false
        
        -- Set Defaults
        if text == nil then text = '' end
        if value == nil then value = '' end
        if fontColor_Down == nil then fontColor_Down = fontColor end
        if backColor_Down == nil then backColor_Down = backColor end
        
        -- Look for button events
        if Mouse.Down and Mouse.x > x and Mouse.x < x + width and Mouse.y > y and Mouse.y < y + height then down = true end
        if Mouse.Release and Mouse.x > x and Mouse.x < x + width and Mouse.y > y and Mouse.y < y + height then click = true end
        if click then LastPlayerInteraction = math.floor(getTime()) end
        
        -- Build the button 
        DisplayBox(layer, x, y, width, height, Ternary(down,backColor_Down,backColor), shadow, 2, nil, nil, nil)
        DisplayText(layer, font, text, x + math.floor(width/2), y + math.floor(height/2), AlignH_Center, AlignV_Middle, Ternary(down,fontColor_Down,fontColor))
        return {Value = value, Down = down, Click = click}
    end
    
    function ToCurrency(n)
        local c = tostring(n)
        c = c:reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
	   return c .. 'q'
    end
  
    function CacheLoadImages()
        if #Gallery <= 16 then
            for k,v in ipairs(Gallery) do
                loadImage(v.Img)
            end
        end
    end
    
    -- These only need called on init
    GetScreen()
    CacheLoadImages()
    LastAutoScroll = math.floor(getTime())
end

GetMouse()

-- Layers
local forelayer = createLayer()
local panellayer = createLayer()
local backlayer = createLayer()
local headerfont = loadFont("Montserrat-SemiBold", 40)
local titlefont = loadFont("Montserrat", 28)
local pricefont = loadFont("Montserrat-Light", 25)
local descriptionfont = loadFont("Montserrat-Light", 16)
local idescriptionfont = loadFont("Montserrat-ExtraLightItalic", 16)
local btnfont = loadFont("Montserrat", 20)
local subfont = loadFont("FiraMono-Bold", 45)

if LastPlayerInteraction ~= nil and math.floor(getTime() - LastPlayerInteraction) % 30 == 0 and math.floor(getTime() - LastPlayerInteraction) > 1 then LastPlayerInteraction = nil end 

if math.floor(getTime() - LastAutoScroll)% 8 == 0 and math.floor(getTime() - LastAutoScroll) > 1 and LastPlayerInteraction == nil then 
    LastAutoScroll = math.floor(getTime())
    NextImg() 
end 

for k,v in ipairs(Tabs) do
    local tab = CreateButton(backlayer, 0, Screen.HeaderHeight + 10 + (35 * (k - 1)), Screen.InfoWidth, 35, v.Name, v.Name, Ternary(SelectedTab == k, SelectedTabHighlightColor, DefaultTabHighlightColor), ToColor(.9, .9, .9, 1), ToColor(0.0, 0.0, 0.0, 0), ToColor(0.0, 0.0, 0.0, 0), btnfont, Ternary(SelectedTab == k, SelectedTabHighlightColor, DefaultTabHighlightColor))
    if tab.Click then SelectedTab = k end
end

for k,v in ipairs(Tabs[SelectedTab].Info) do
    local y = Screen.HeaderHeight + 30 + (#Tabs * 35) + (18 * (k - 1))
    
    if v.LongDescription == nil then
        DisplayText(backlayer, descriptionfont, v.Key, 5, y, AlignH_Left, AlignV_Middle, FontColor)
        DisplayText(backlayer, idescriptionfont, v.Value, Screen.InfoWidth - 5, y, AlignH_Right, AlignV_Middle, FontColor)
    else
        DisplayTextArea(backlayer, v.LongDescription, math.floor(Screen.InfoWidth/2), y, Screen.InfoWidth, 25, descriptionfont, AlignH_Center, AlignV_Middle, FontColor)
    end
end

-- Display the selected img
local btnPrev = CreateButton(forelayer, Screen.InfoWidth + 15, Screen.Height - 50, 100, 38, "PREV", "PREV", DefaultButtonFontColor, PressedButtonFontColor, DefaultButtonColor, PressedButtonColor, btnfont, ToColor(0.0, 0.0, 0.0, 1))
local btnNext = CreateButton(forelayer, Screen.Width - 115, Screen.Height - 50, 100, 38, "NEXT", "NEXT", DefaultButtonFontColor, PressedButtonFontColor, DefaultButtonColor, PressedButtonColor, btnfont, ToColor(0.0, 0.0, 0.0, 1))
if btnNext.Click then NextImg() end
if btnPrev.Click then PrevImg() end

if Gallery[CurrentGalleryImageIndex].OptionalHeading ~= nil and Gallery[CurrentGalleryImageIndex].OptionalHeading ~= '' then
    local o = Ternary(Mouse.x > Screen.InfoWidth + 15 and Mouse.x < Screen.InfoWidth + 15 + Screen.ContentWidth - 25 and Mouse.y > Screen.HeaderHeight and Mouse.y < Screen.HeaderHeight + 90, .9, .7)
    DisplayText(panellayer, titlefont, Gallery[CurrentGalleryImageIndex].OptionalHeading, Screen.HalfWidth + math.floor(Screen.InfoWidth/2), Screen.HeaderHeight + 45, AlignH_Center, AlignV_Middle, SubHeaderFontColor)
    DisplayBox(forelayer, Screen.InfoWidth + 15, Screen.HeaderHeight, Screen.ContentWidth - 25, 90, ToColor(0, 0, 0, o), ToColor(0, 0, 0, o), 25, nil, nil, nil)
end

if Gallery[CurrentGalleryImageIndex].OptionalDescription ~= nil and Gallery[CurrentGalleryImageIndex].OptionalDescription ~= '' then
    local o = Ternary(Mouse.x > Screen.InfoWidth + 125 and Mouse.x < Screen.InfoWidth + 125 + Screen.ContentWidth - 250 and Mouse.y > Screen.Height - 135 and Mouse.y < Screen.Height - 135 + 135, .9, .7)
    DisplayTextArea(panellayer, Gallery[CurrentGalleryImageIndex].OptionalDescription, Screen.HalfWidth + math.floor(Screen.InfoWidth/2), Screen.Height - 125, 180, 45, descriptionfont, AlignH_Center, AlignV_Middle, FontColor)
    DisplayBox(forelayer, Screen.InfoWidth + 125, Screen.Height - 135, Screen.ContentWidth - 250, 135, ToColor(0, 0, 0, o), ToColor(0, 0, 0, o), 25, nil, nil, nil)
end

CurrentImage = loadImage(Gallery[CurrentGalleryImageIndex].Img)
loadImage(Gallery[Ternary(CurrentGalleryImageIndex + 1 > #Gallery, 1, CurrentGalleryImageIndex + 1)].Img)
addImage(forelayer, CurrentImage, Screen.InfoWidth, Screen.HeaderHeight, Screen.ContentWidth, Screen.ContentHeight)
DisplayBox(panellayer, 0, Screen.Height - 3, Screen.InfoWidth - GetPercNum(Screen.InfoWidth, GetPerc((Ternary(LastPlayerInteraction == nil,LastAutoScroll,LastPlayerInteraction) - getTime())% Ternary(LastPlayerInteraction == nil,8,30),Ternary(LastPlayerInteraction == nil,8,30))), 3, ToColor(1, 1, 1, 1), ToColor(1, 1, 1, 1), 2, nil, nil, nil)

-- Header and Info
DisplayBox(forelayer, 0, 0, Screen.InfoWidth, Screen.InfoHeight, InfoColumnHeader, ToColor(0, 0, 0, 1), 15, nil, nil, nil)
DisplayBox(backlayer, 0, 0, Screen.HeaderWidth, Screen.HeaderHeight, HeaderColor, ToColor(0, 0, 0, 1), 25, nil, nil, nil)
DisplayText(backlayer, headerfont, ProductName, 15, 50, AlignH_Left, AlignV_Middle, HeaderFontColor)

if BpPrice ~= "" then
    DisplayText(backlayer, pricefont, 'BP: '..ToCurrency(BpPrice), Screen.Width - 15, math.floor(Screen.HeaderHeight/2) + Ternary(TokenPrice ~= "",-15,0), AlignH_Right, AlignV_Middle, FontColor)
end

if TokenPrice ~= "" then
    DisplayText(backlayer, pricefont, 'Token: '..ToCurrency(TokenPrice), Screen.Width - 15, math.floor(Screen.HeaderHeight/2) + Ternary(BpPrice ~= "",15,0), AlignH_Right, AlignV_Middle, FontColor)
end

setBackgroundColor(BackgroundColor.r, BackgroundColor.g, BackgroundColor.b)

requestAnimationFrame(2)
